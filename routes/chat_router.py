import os
from datetime import datetime
import uuid
from dotenv import load_dotenv
from fastapi import APIRouter, HTTPException
from openai import OpenAI

from schemas.schemas import MessageRequest, MessageResponse, UserChatHistoryResponse, ChatMessage
from database.mongo_services import add_message, get_history, chat_collection, users_collection

load_dotenv()
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
router = APIRouter()


def get_bot_reply(text: str) -> str:
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system",
                 "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n l·∫≠p k·∫ø ho·∫°ch v√† l·ªãch tr√¨nh c√¥ng vi·ªác cho ng∆∞·ªùi d√πng. "
                            "L·ªãch tr√¨nh c·ªßa b·∫°n ph·∫£i b·∫Øt ƒë·∫ßu t·ª´ 07:00 s√°ng v√† k·∫øt th√∫c kh√¥ng qu√° 23:00 t·ªëi.T√πy theo ng∆∞·ªùi D√πng y√™u c·∫ßu n·∫øu ng∆∞·ªùi d√πng ch·ªâ y√™u c·∫ßu g·ª£i √Ω m·ªôt s·ª± ki·ªán th√¥i th√¨ b·∫°n ph·∫£i ƒë∆∞a ra ch·ªâ m·ªôt s·ª± ki·ªán th√¥i nh√° kh√¥ng ƒë∆∞·ª£c ƒë∆∞a ra l·ªãch tr√¨nh c·∫£ ng√†y hay c·∫£ tu·∫ßn ƒë√¢u  "
                            "kh√¥ng c·∫ßn cho th√™m c√¢u m·ªü ƒë·∫ßu khi b·∫°n tr·∫£ l·ªùi ƒë√¢u ƒë∆∞a th·∫≥ng l·ªãch v√†o lu√¥n"
                            "H√£y t·∫°o l·ªãch tr√¨nh h·ª£p l√Ω, kh√¥ng chia nh·ªè qu√° t·ª´ng gi·ªù m√† nh√≥m c√°c ho·∫°t ƒë·ªông trong m·ªôt kho·∫£ng th·ªùi gian d√†i h∆°n, "
                            "v√≠ d·ª•: t·ª´ 07:30 ƒë·∫øn 11:45 l√† m·ªôt kho·∫£ng th·ªùi gian cho m·ªôt ho·∫°t ƒë·ªông d√†i. ƒë·∫∑c bi·ªát l√† ƒë·ªëi v·ªõi c√°c ho·∫°t ƒë·ªông li√™n quan ƒë·∫øn c√¥ng vi·ªác v√† h·ªçc t·∫≠p n√™n k√©o d√†i kho·∫£ng m·ªôt bu·ªïi 3-4 ti·∫øng "
                            "M·ªói ho·∫°t ƒë·ªông c·∫ßn c√≥ th·ªùi gian r√µ r√†ng v√† ph√π h·ª£p v·ªõi m·ªôt ng√†y l√†m vi·ªác b√¨nh th∆∞·ªùng. "
                            "khi m√† ƒë∆∞a ra l·ªãch tr√¨nh th√¨ h√£y ƒë∆∞a ra ·ªü cu·ªëi m·ªôt c√¢u g√¨ ƒë√≥ nh∆∞ l√† b·∫°n c√≥ th·∫•y l·ªãch tr√¨nh n√†y ph√π h·ª£p kh√¥ng ? ki·ªÉu nh∆∞ v·∫≠y "
                            "khi ƒë∆∞a ra l·ªãch tr√¨nh nh∆∞ v·∫≠y th√¨ c≈©ng h√£y ƒë∆∞a ra m·ªôt v√†i th·ªùi gian ƒë·ªÉ c√≥ th·ªÉ ƒëi t·∫≠p th·ªÉ d·ª•c th·ªÉ thao v√≠ d·ª• : th·ªùi gian t·ª´ 17:30 - 19:30 | ƒêi t·∫≠p th·ªÉ d·ª•c n√¢ng cao s·ª©c kh·ªèe "
                            "L·ªãch tr√¨nh c·ªßa b·∫°n ph·∫£i g·ª£i √Ω c√°c c√¥ng vi·ªác nh∆∞: ho√†n th√†nh task quan tr·ªçng, ngh·ªâ gi·∫£i lao, ƒÉn tr∆∞a, h·ªçp nh√≥m, v.v."
                            "C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ph·∫£i tr·∫£ v·ªÅ l·ªãch tr√¨nh theo format sau:\n\n"
                            "üìÖ L·ªãch tr√¨nh ng√†y [ng√†y/th√°ng/nƒÉm]\n"
                            "[Gi·ªù b·∫Øt ƒë·∫ßu] - [Gi·ªù k·∫øt th√∫c] | [T√™n ho·∫°t ƒë·ªông] ‚Üí [M√¥ t·∫£]\n\n"
                            "V√≠ d·ª•:\n"
                            "üìÖ L·ªãch tr√¨nh ng√†y 03/04/2025\n"
                            "06:00 - 07:00 | ƒÇn b·ªØa s√°ng v√† l√†m t√°ch caffee | l√†m b√°t ph·ªü 2 tr·ª©ng tr·∫ßn  "
                            "08:00 - 11:00 | Ho√†n th√†nh c√¥ng vi·ªác | Ki·ªÉm tra email v√† l√†m b√°o c√°o\n"
                            "11:00 - 12:30 | Ngh·ªâ tr∆∞a | ƒÇn u·ªëng v√† th∆∞ gi√£n\n"
                            "...\n\n"
                            "b·∫°n v·∫´n tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√°c b√¨nh th∆∞·ªùng nh∆∞ng khi n√†o ng∆∞·ªùi d√πng y√™u c·∫ßu g·ª£i √Ω l·ªãch th√¨ h√£y tu√¢n th·ªß format v√† c√°c √Ω b√™n tr√™n"
                            "L·ªãch tr√¨nh c·∫ßn h·ª£p l√Ω, kh√¥ng chia nh·ªè t·ª´ng kho·∫£ng th·ªùi gian qu√° chi ti·∫øt, v√† kh√¥ng c√≥ ho·∫°t ƒë·ªông ngo√†i khung gi·ªù t·ª´ 07:00 ƒë·∫øn 23:00."},
                {"role": "user", "content": text}
            ],
            temperature=0.7,  # Th√™m ƒë·ªô linh ho·∫°t cho c√°c g·ª£i √Ω
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return "L·ªói khi k·∫øt n·ªëi v·ªõi OpenAI: " + str(e)


@router.post("", response_model=UserChatHistoryResponse)
async def chat(msg: MessageRequest):
    # Ki·ªÉm tra user_id c√≥ t·ªìn t·∫°i trong users collection kh√¥ng
    user_exists = users_collection.find_one({"_id": msg.user_id})
    if not user_exists:
        raise HTTPException(status_code=400, detail="User ID kh√¥ng t·ªìn t·∫°i")

    reply = get_bot_reply(msg.text)

    # T·∫°o tin nh·∫Øn m·ªõi
    new_message = {
        "text": msg.text,
        "reply": reply,
    }

    # Ki·ªÉm tra user_id ƒë√£ c√≥ trong chat_collection ch∆∞a
    user_chat = chat_collection.find_one({"user_id": msg.user_id})

    if user_chat:
        # N·∫øu ƒë√£ c√≥, c·∫≠p nh·∫≠t danh s√°ch messages
        chat_collection.update_one(
            {"user_id": msg.user_id},
            {"$push": {"messages": new_message}}
        )
    else:
        # N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
        chat_collection.insert_one({
            "_id": str(uuid.uuid4()),
            "user_id": msg.user_id,
            "messages": [new_message],
            "created_at": datetime.utcnow().isoformat()
        })

    return UserChatHistoryResponse(
        httpStatus=200,
        resultCode="OK",
        resultMsg="Chat response generated successfully",
        resourceId=msg.user_id,
        responseTimestamp=datetime.utcnow().isoformat(),
        data={"messages": [new_message]}
    )



@router.get("/history/{user_id}", response_model=UserChatHistoryResponse)
async def get_user_history(user_id: str):
    user_chat = chat_collection.find_one({"user_id": user_id})

    if not user_chat:
        return UserChatHistoryResponse(
            httpStatus=404,
            resultCode="404 NOT FOUND",
            resultMsg="No chat history found for this user",
            resourceId=user_id,
            responseTimestamp=datetime.utcnow().isoformat(),
            data={
                "user_id": user_id,
                "messages": []
            }
        )

    # L·∫•y to√†n b·ªô messages nh∆∞ng lo·∫°i b·ªè timestamp
    history = [
        {
            "text": msg["text"],
            "reply": msg["reply"]
        }
        for msg in user_chat.get("messages", [])
    ]

    return UserChatHistoryResponse(
        httpStatus=200,
        resultCode="100 CONTINUE",
        resultMsg="User chat history retrieved successfully",
        resourceId=user_id,
        responseTimestamp=datetime.utcnow().isoformat(),
        data={
            "user_id": user_id,
            "messages": history  # Danh s√°ch messages kh√¥ng c√≥ timestamp
        }
    )
#
# @router.delete("/conversation/{conversation_id}")
# async def delete_conversation(conversation_id: str):
#     if not conversation_id:
#         raise HTTPException(status_code=400, detail="Thi·∫øu conversation_id")
#     print(f"conversation_id nh·∫≠n ƒë∆∞·ª£c: {conversation_id}")
#     result = chat_collection.delete_one({"_id": conversation_id.strip()})  # ƒë·∫£m b·∫£o vi·ªác x√≥a kho·∫£ng tr·∫Øng
#     if result.deleted_count == 1:
#         return {"message": "X√≥a cu·ªôc h·ªôi tho·∫°i th√†nh c√¥ng"}
#     return {"message": "Kh√¥ng t√¨m th·∫•y cu·ªôc h·ªôi tho·∫°i"}

#
# @router.post("/new_conversation/{user_id}")
# async def new_conversation(user_id: str):
#     new_conversation_id = str(uuid4())
#     conversation = {
#         "_id": new_conversation_id,
#         "user_id": user_id,
#         "messages": [],
#         "created_at": datetime.now()
#     }
#     chat_collection.insert_one(conversation)
#     return {
#         "message": "ƒê√£ t·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi",
#         "conversation_id": new_conversation_id
#     }
